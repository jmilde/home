#+TITLE: archell emacs setup
#+AUTHOR: jan
* TODO: [0/1]
- [ ] check lsp for typescript/js/react e.g https://emacs-lsp.github.io/lsp-mode/tutorials/reactjs-tutorial/
- [ ] look at flycheck for linting etc.

* initial Setup
put this in the =user-init-file= to tangle and load this setup.
all code blocks that should not be included by default have to be tagged with ':tangle no'
#+BEGIN_SRC emacs-lisp :tangle no
  (package-initialize)
  (org-babel-load-file (expand-file-name "./setup.org" user-emacs-directory))
#+END_SRC
* general
** packages
initialize package sources
#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org"   . "https://orgmode.org/elpa/")
                         ("elpa"  . "https://elpa.gnu.org/packages/")))

#+end_src

occasionally, some update is buggy.  just revert to the [[https://stable.melpa.org/#/][stable version]].
#+BEGIN_SRC emacs-lisp :tangle no
  (push '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/") package-archives)
#+END_SRC

if no archive is existing then refresh list, generally can run `package-refresh-contents`
#+begin_src emacs-lisp
  ;;(package-initialize)
  (unless package-archive-contents
    (package-refresh-contents)
    (all-the-icons-install-fonts) ; needed after first setup to make icons work
    )
#+end_src

make sure use-package is installed
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+end_src

always make sure that all required packages are loaded
#+begin_src emacs-lisp
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** performance/benchmark
if emacs takes too long to initialize, [[https://github.com/dholm/benchmark-init-el][benchmark-init]] helps to tell why.
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package benchmark-init
  :ensure t
  :config
  ;; To disable collection of benchmark data after init is done.
  (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+END_SRC

** system
for [[https://www.emacswiki.org/emacs/EmacsClient][emacsclient]], runs a emacs server in the background. So if we open several instances of an emacs client, they will all connect to the same server instead of starting a new process every time.
#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p) (server-start))
#+END_SRC

** safety
to prevent custom from editing the =user-init-file=.
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC

no lock.  no auto-save.  no backup.  for safety use git.
#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles           nil)
  (setq auto-save-default          nil)
  (setq auto-save-list-file-prefix nil)
  (setq make-backup-files          nil)
#+END_SRC
removes some safety measures.
they encourage recklessness.
#+BEGIN_SRC emacs-lisp
  (setq disabled-command-function nil)
  (setq dired-recursive-deletes 'always)
  (setq dired-recursive-copies  'always)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Styling
*** simplify style
deactivate emacs default elements for a minimal look
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message     nil)
  (tool-bar-mode               -1)  ; disable the toolbar
  (menu-bar-mode               -1)  ; disable the menu bar
  (scroll-bar-mode             -1)  ; disable visibile scrollbar
  (tooltip-mode                -1)  ; tooltips disable
  (set-fringe-mode              4)  ; padding
  (column-number-mode           t)  ; show column position in modeline
  (line-number-mode             t)  ; show line position in modeline
  (setq ring-bell-function      'ignore) ; no sound effects
#+end_src

*** Theme

 pick a theme
 #+begin_src emacs-lisp
   (use-package modus-themes
     :ensure t
     :config
     (setq modus-themes-org-blocks 'gray-background)
     (load-theme 'modus-vivendi))
 #+end_src


 add custom font
 #+begin_src emacs-lisp
   (set-face-attribute 'default nil :font "Iosevka" :height 110)
 #+end_src


 add nicer modeline
 #+begin_src emacs-lisp
   (use-package all-the-icons)
   (use-package doom-modeline
     :init (doom-modeline-mode 1)
     :custom ((doom-modeline-height 15)))

 #+end_src



 add rainbow delimiters for better visual distinction of parenthesis
 #+begin_src emacs-lisp
   (use-package rainbow-delimiters
     :hook (prog-mode . rainbow-delimiters-mode)) ; prog-mode is any programming language
 #+end_src

** navigation
*** symbol
use deadgrep to use ripgrep to search through files
 #+begin_src emacs-lisp
   (use-package deadgrep
     :bind
     (("C-M-q" . deadgrep)))
 #+end_src

*** buffer
#+begin_src emacs-lisp
  (use-package ibuffer
    :init
    (setq ibuffer-saved-filter-groups
          '(("default"
           ("dired" (mode . dired-mode))
           ("emacs" (or (name . "^\\*scratch\\*$")
                        (name . "^\\*Messages\\*$")
                        (name . "^\\*Process List\\*$")))
           ("help"  (or (mode . help-mode)
                        (mode . Info-mode)
                        (name . "^\\*Backtrace\\*$")))
           ("magit"     (name . "^\\magit"))
           (""          (name . "")))))
     (add-hook 'ibuffer-mode-hook
              (lambda ()
                (ibuffer-switch-to-saved-filter-groups "default")))
    :bind
    ("C-x C-b" . ibuffer)
    )
#+end_src

*** position
improved switching between windows
#+begin_src emacs-lisp
  (use-package ace-window
    :bind ("C-x o" . ace-window)
  )
#+end_src

toggle line numbers
#+begin_example
(bind-keys ("M-#"     . linum-mode))
#+end_Exampleg

avy for jumping to lines/word
#+begin_src emacs-lisp
  (use-package avy
    :bind
    (("M-g h" . avy-org-goto-heading-timer) ; jump to header in org file
     ("M-g c" . avy-goto-char-2))
    )
#+end_src

*** history
#+begin_src emacs-lisp
    (use-package undo-tree
      :bind
      (("C--" . undo-tree-undo))
      :config
      (global-undo-tree-mode 1)
      )
#+end_src

*** structure-based
|   | C        | M        | C-M      |
|---+----------+----------+----------|
| a | line min | buff min | sexp min |
| e | line max | buff max | sexp max |
| f | char inc | word inc | sexp inc |
| b | char dec | word dec | sexp dec |
| n | line inc | sent inc | para inc |
| p | line dec | sent dec | para dec |

- change emacs default bindings
#+begin_src emacs-lisp
  (bind-keys ("M-a"   . beginning-of-buffer)
             ("M-e"   . end-of-buffer)
             ("M-n"   . forward-sentence)
             ("M-p"   . backward-sentence)
             ("C-M-n" . forward-paragraph)
             ("C-M-p" . backward-paragraph))
#+end_src

- smartparens setup
  #+begin_src emacs-lisp
    (use-package smartparens
         :bind
         (;; move with(in) parenthesis
          ("C-M-a" . sp-beginning-of-sexp)
          ("C-M-e" . sp-end-of-sexp)
          ("C-M-f" . sp-forward-parallel-sexp)
          ("C-M-b" . sp-backward-parallel-sexp)
          ;; ] right [ left, M down C-M up
          ("C-M-]" . sp-up-sexp)
          ("C-M-[" . sp-backward-up-sexp)
          ("M-]"   . sp-backward-down-sexp)
          ("M-["   . sp-down-sexp)
          ;; restructuring bindings
          ("M-)"   . sp-forward-slurp-sexp)
          ("M-("   . sp-backward-slurp-sexp)
          ("M-}"   . sp-forward-barf-sexp)
          ("M-{"   . sp-backward-barf-sexp)
          ("M->"   . sp-splice-sexp-killing-forward)
          ("M-<"   . sp-splice-sexp-killing-backward)
          ("C-M-u" . sp-raise-sexp)
          ("C-M-d" . sp-splice-sexp)
          ("C-M-h" . sp-rewrap-sexp)
          ("C-M-j" . sp-split-sexp)
          ("M-+"   . sp-join-sexp)
          ("M-*"   . sp-convolute-sexp)
          ;; behavior enhancements
          ("M-DEL"   . sp-backward-kill-word)
          ("M-d"     . sp-kill-word)
          ("C-k"     . sp-kill-hybrid-sexp)
          ("C-M-k"   . sp-kill-sexp)
          ("C-M-t"   . sp-transpose-sexp)
          ("C-x C-t" . sp-transpose-hybrid-sexp)
          ("M-@"     . sp-select-next-thing)
          ("C-M-@"   . sp-select-previous-thing-exchange)
          ;; indentq
          ("C-j" . newline-and-indent)
          )
         :config
         (smartparens-global-mode 1)
         )
  #+end_src
- move things around
  #+begin_src emacs-lisp
    (bind-keys ("<M-right>" . drag-stuff-right)
               ("<M-left>"  . drag-stuff-left)
               ("<M-down>"  . drag-stuff-down)
               ("<M-up>"    . drag-stuff-up))
  #+end_src

** editing
*** region based
#+begin_src emacs-lisp
  (use-package region-bindings-mode
    :config
    (region-bindings-mode-enable)
    )
#+end_src

*** whitespace
#+begin_src emacs-lisp
  (add-hook 'before-save-hook #'whitespace-cleanup)
  (global-hungry-delete-mode 1)
  (setq require-final-newline t)
#+end_src

*** batch
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :config
    (multiple-cursors-mode)
    :after (region-bindings-mode)
    :bind (:map region-bindings-mode-map
                (";" . comment-or-uncomment-region)
                ("b" . comment-box)
                ("d" . delete-region)
                ("g" . keyboard-quit)
                ("i" . indent-region)
                ("k" . kill-region)
                ("l" . downcase-region)
                ("m" . mc/mark-all-in-region) ("M" . vr/mc-mark)
                ("n" . mc/edit-lines)
                ("r" . replace-string)        ("R" . vr/replace)
                ("s" . sort-lines)
                ("u" . upcase-region)
                ("w" . kill-ring-save))
  )
#+end_src

** evaluation
to evaluate code interactively, i bind =M-RET= for region or sexp or line and =C-M-x= for defun or block.
this applies to all language-specific modes which offers the options.
Needs to be called in the individual language setups
#+BEGIN_SRC emacs-lisp
  (defmacro def-eval-dwim (name eval-region eval-last)
    "define NAME to interactively call either the EVAL-REGION
  function or the EVAL-LAST function, depending on `use-region-p'.
  both functions must be given as unquoted symbols."
    `(defun ,name ()
       ,(format "`%s' or `%s'" eval-region eval-last)
       (interactive)
       (call-interactively
        (if (use-region-p)
            (function ,eval-region)
          (function ,eval-last)))))
#+END_SRC
* System
** search and completion
*** vertico
#+begin_src emacs-lisp
    ;; Enable vertico
    (use-package vertico
      :init
      (vertico-mode)
      )

    ;; Persist history over Emacs restarts. Vertico sorts by history position.
    (use-package savehist
      :init
      (savehist-mode))

    ;; A few more useful configurations...
    (use-package emacs
      :init
      ;; Add prompt indicator to `completing-read-multiple'.
      ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
      (defun crm-indicator (args)
        (cons (format "[CRM%s] %s"
                      (replace-regexp-in-string
                       "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                       crm-separator)
                      (car args))
              (cdr args)))
      (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

      ;; Do not allow the cursor in the minibuffer prompt
      (setq minibuffer-prompt-properties
            '(read-only t cursor-intangible t face minibuffer-prompt))
      (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

      ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
      ;; Vertico commands are hidden in normal buffers.
      (setq read-extended-command-predicate
            #'command-completion-default-include-p)

      ;; Enable recursive minibuffers
      (setq enable-recursive-minibuffers t))

    ;; Configure directory extension.
    (use-package vertico-directory
      :after vertico
      :ensure nil
      ;; More convenient directory navigation commands
      :bind (:map vertico-map
                  ("RET" . vertico-directory-enter)
                  ("DEL" . vertico-directory-delete-char)
                  ("M-DEL" . vertico-directory-delete-word))
      ;; Tidy shadowed file names
      :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src
*** orderless
#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src
*** marginalia
#+begin_src emacs-lisp
  ;;Enable rich annotations in lists using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src
*** ctrlf
#+begin_src emacs-lisp
  (use-package ctrlf
    :init
    (ctrlf-mode +1)
    )
#+end_src

** tooltips
#+begin_src emacs-lisp
  ;; show infos for keybindings after a delay
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src

** projectile for project navigation
 #+begin_src emacs-lisp
   (use-package projectile
     :diminish projectile-mode
     :config (projectile-mode)
     :bind-keymap
     ("C-c p" . projectile-command-map)
     :init
     (when (file-directory-p "~/")
       (setq projectile-project-search-path '("~/")))
     (setq projectile-switch-project-action #'projectile-dired)
     ;;:custom ((projectile-completion-system 'ivy))
     )
 #+end_src

** magit
 #+begin_src emacs-lisp
   (use-package magit
     :custom
     (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
   )

 #+end_src

** treemacs
 #+begin_src emacs-lisp
   (use-package treemacs
     :ensure t
     :defer t
     :config
     (setq treemacs-no-png-images t
           treemacs-width 24)
     :bind ("C-c t" . treemacs))
 #+end_src

 #+RESULTS:
 : treemacs

* Org mode
** Styling
#+begin_src emacs-lisp
  (defun custom/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Ubuntu" :weight 'regular :height (cdr face)))
    )

  (defun custom/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))



  (use-package org-bullets ; use symbols instead of asterix for the headers
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
** Org setup
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook (org-mode . custom/org-mode-setup)
    :config
    (setq org-ellipsis " ▾") ; show symbol instead of '...' at the end of a header
    (setq org-todo-keywords '((sequence  "TODO(t!)" "PROCESSING(p!)" "WAIT(w!)" "|" "DONE(d!)" "CANCELED(c@!)")))
    (setq org-todo-keyword-faces
          '(("PROCESSING" . "orange")
            ("CANCELED" . "grey")))
    (setq org-agenda-files (list
                            "~/org/orgfiles/backlog.org"
                            "~/org/orgfiles/life.org"
                            "~/org/orgfiles/journal.org"))

    (custom/org-font-setup))
#+END_SRC
** language setup
To execute or export code in org-mode code blocks, you’ll need to set up org-babel-load-languages for each languag you’d like to use.
https://orgmode.org/worg/org-contrib/babel/languages/index.html documents all of the languages that you can use with org-babel.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((shell . t)
          (emacs-lisp . t)
          (python . t))))
#+end_src

** structural templates
You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** keybindings
#+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "C-c o")
                (lambda () (interactive) (find-file "~/org/orgfiles/life.org")))
  (global-set-key (kbd "C-c l") 'org-store-link)
  (bind-key "C-c c" 'org-capture)
  (bind-key "C-c a" 'org-agenda)
#+END_SRC

** templates
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
    '(
    ("t" "TODO" entry (file "~/org/orgfiles/inbox.org") (file "~/org/templates/tpl_todo.txt") :empty-lines-after 1)
    ("d" "daily" entry (file+olp+datetree "~/org/orgfiles/life.org" "daily") (file "~/org/templates/tpl_daily.txt")  :empty-lines-after 1)
    ("w"  "weekly plan" entry (file+olp+datetree "~/org/orgfiles/life.org" "daily") (file "~/org/templates/tpl_weekly_plan.txt")  :empty-lines-after 1)
    ("p" "Private Templates")
      ("pb" "Book-list" entry (file+headline "~/org/orgfiles/life.org" "book list") (file "~/org/templates/tpl_books.txt") :empty-lines-after 1)
      ("pj" "Journal" entry (file+datetree "~/org/orgfiles/journal.org") "** %T - %^{Heading}")
      ("pr" "Weekly Review" entry (file+datetree "~/org/orgfiles/weekly_review.org") (file "~/org/templates/tpl_weekly_review.txt"))
   ("s" "Shopping" entry (file "~/org/orgfiles/backlog.org") (file "~/org/templates/tpl_shopping.txt") :empty-lines 1)


  ))
#+END_SRC
* Development
** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** IDE functionalities via language server protocal (lsp)
***  language server
We use [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
    ; show project breadcrumb file path at top of file
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))

#+end_src

*** lsp-ui
[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src

*** lsp-treemacs
[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after (lsp treemacs)
    )
#+end_src

** languages
*** Python
- general python mode setup
  #+begin_src emacs-lisp
  (use-package python-mode
    :ensure t
    :custom
    (python-shell-interpreter "python3"))
   #+end_src
- set the lsp, pyright seems to be the best option, but there are alternatives
  #+begin_src emacs-lisp
    (use-package lsp-pyright
      :ensure t
      :hook (python-mode . (lambda ()
                              (require 'lsp-pyright)
                              (lsp))))
  #+end_src
- set up poetry
      #+begin_src emacs-lisp
        (use-package poetry
          :ensure t)

   #+end_src
*** typescript
  #+begin_src  emacs-lisp





  #+end_src
