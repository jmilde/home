#+TITLE: emacs setup
#+AUTHOR: ysmiraak

* map

- dead on terminal: []
- forced translate: [target]
- override default: +old+ ~new~

|         | C-                                | M-                                                              | C-M-                                                |
|---------+-----------------------------------+-----------------------------------------------------------------+-----------------------------------------------------|
| DEL     | [DEL]                             | ~sp-backward-kill-word~                    +backward-kill-word+ | [C-M-h]                                             |
| TAB     | [TAB]                             | [C-M-i]                                                         | [C-M-i]                                             |
| RET     | [RET]                             | ~eval-last-sexp~                                                | [M-RET]                                             |
| SPC     | [C-@]                             | just-one-space                                                  | [M-SPC]                                             |
| <up>    | <up>                              | ~drag-stuff-up~                                                 | [ESC <up>]                                          |
| <left>  | ~[]~                  +left-word+ | ~drag-stuff-left~                               +backward-word+ | [ESC <left>]                                        |
| <down>  | <down>                            | ~drag-stuff-down~                                               | [ESC <down>]                                        |
| <right> | ~[]~                 +right-word+ | ~drag-stuff-right~                               +forward-word+ | [ESC <right>]                                       |
|---------+-----------------------------------+-----------------------------------------------------------------+-----------------------------------------------------|
| 1       | []                                | digit-argument 1                                                | [M-1]                                               |
| 2       | []                                | digit-argument 2                                                | [M-2]                                               |
| 3       | []                                | digit-argument 3                                                | [M-3]                                               |
| 4       | []                                | digit-argument 4                                                | [M-4]                                               |
| 5       | []                                | digit-argument 5                                                | [M-5]                                               |
| 6       | []                                | digit-argument 6                                                | [M-6]                                               |
| 7       | []                                | digit-argument 7                                                | [M-7]                                               |
| 8       | []                                | digit-argument 8                                                | [M-8]                                               |
| 9       | []                                | digit-argument 9                                                | [M-9]                                               |
| 0       | []                                | digit-argument 0                                                | [M-0]                                               |
|---------+-----------------------------------+-----------------------------------------------------------------+-----------------------------------------------------|
| !       | []                                | shell-command                                                   |                                                     |
| @       | set-mark-command                  | +mark-word+                                                     |                                                     |
| #       | []                                | ~linum-mode~                                                    |                                                     |
| $       | []                                | ~flyspell-mode~                                   +ispell-word+ |                                                     |
| %       | []                                | query-replace                                                   | ~vr/query-replace~           +query-replace-regexp+ |
| ^       |                                   | delete-indentation                                              |                                                     |
| &       | []                                | async-shell-command                                             |                                                     |
| *       | []                                | ~sp-raise-sexp~                                                 |                                                     |
| (       | []                                | ~sp-splice-sexp-killing-backward~          +insert-parentheses+ |                                                     |
| )       | []                                | ~sp-splice-sexp-killing-forward~ +move-past-close-and-reindent+ |                                                     |
|---------+-----------------------------------+-----------------------------------------------------------------+-----------------------------------------------------|
| -       | [C-_]                             | negative-argument                                               | [C-M-_]                                             |
| =       | []                                | count-words-region                                              | [M-=]                                               |
| [       | [ESC-]                            | ~sp-absorb-sexp~                                                | ~sp-forward-slurp-sexp~                             |
| ]       | abort-recursive-edit              | ~sp-extract-before-sexp~                                        | ~sp-forward-barf-sexp~                              |
| ;       | []                                | comment-dwim                                                    | [M-;]                                               |
| '       | []                                | ~avy-goto-char-2~                          +abbrev-prefix-mark+ | [M-']                                               |
| \       | toggle-input-method               | delete-horizontal-space                                         | indent-region                                       |
| `       | []                                | tmm-menubar                                                     | [M-`]                                               |
| ,       | []                                | xref-pop-marker-stack                                           | [M-,]                                               |
| .       | []                                | xref-find-definitions                                           | [M-.]                                               |
| /       | []                                | ~hippie-expand~                                +dabbrev-expand+ | [M-/]                                               |
|---------+-----------------------------------+-----------------------------------------------------------------+-----------------------------------------------------|
| _       | ~undo-tree-undo~           +undo+ | ~undo-tree-redo~                                                | ~toggle-truncate-lines~         +negative-argument+ |
| +       | []                                | ~sp-convolute-sexp~                                             |                                                     |
| {       | [C-[]                             | backward-paragraph                                              |                                                     |
| }       | [C-]]                             | forward-paragraph                                               |                                                     |
| :       | []                                | eval-expression                                                 |                                                     |
| "       | []                                | ~avy-pop-mark~                                                  |                                                     |
| \mid    | [C-\]                             | shell-command-on-region                                         |                                                     |
| ~       | []                                | not-modified                                                    |                                                     |
| <       | []                                | beginning-of-buffer                                             |                                                     |
| >       | []                                | end-of-buffer                                                   |                                                     |
| ?       | []                                | xref-find-regerences                                            |                                                     |
|---------+-----------------------------------+-----------------------------------------------------------------+-----------------------------------------------------|
| a       | move-beginning-of-line            | backward-sentence                                               | ~sp-beginning-of-sexp~         +beginning-of-defun+ |
| b       | backward-char                     | backward-word                                                   | ~sp-backward-sexp~                  +backward-sexp+ |
| c       | [C-c-]                            | ~fix-word-capitalize~                         +capitalize-word+ | exit-recursive-edit                                 |
| d       | ~sp-delete-char~    +delete-char+ | ~sp-kill-word~                                      +kill-word+ | ~sp-down-sexp~                          +down-list+ |
| e       | move-end-of-line                  | forward-sentence                                                | ~sp-end-of-sexp~                     +end-of-defun+ |
| f       | forward-char                      | forward-word                                                    | ~sp-forward-sexp~                    +forward-sexp+ |
| g       | keyboard-quit                     | [M-g-]                                                          | []                                                  |
| h       | [C-h-]                            | ~er/expand-region~                             +mark-paragraph+ | ~sp-join-sexp~                         +mark-defun+ |
| i       | [TAB]                             | tab-to-tab-stop                                                 | ~company-complete~            +completion-at-point+ |
| j       | newline-and-indent                | indent-new-comment-line                                         | ~sp-split-sexp~           +indent-new-comment-line+ |
| k       | ~sp-kill-hybrid-sexp~ +kill-line+ | kill-sentence                                                   | ~sp-kill-sexp~                          +kill-sexp+ |
| l       | recenter-top-bottom               | ~fix-word-downcase~                             +downcase-word+ | reposition-window                                   |
| m       | [RET]                             | back-to-indentation                                             | [M-RET]                                             |
| n       | next-line                         | ~sp-next-sexp~                                                  | ~sp-select-next-thing~               +forward-list+ |
| o       | open-line                         | [M-o-]                                                          | ~sp-splice-sexp~                       +split-line+ |
| p       | previous-line                     | ~sp-previous-sexp~                                              | ~sp-select-previous-thing-exchange~ +backward-list+ |
| q       | quoted-insert                     | fill-paragraph                                                  | ~sp-rewrap-sexp~                   +indent-pp-sexp+ |
| r       | isearch-backward                  | move-to-window-line-top-bottom                                  | isearch-backward-regexp                             |
| s       | isearch-forward                   | ~swiper~                                                        | isearch-forward-regexp                              |
| t       | transpose-chars                   | transpose-words                                                 | ~sp-transpose-sexp~               +transpose-sexps+ |
| u       | universal-argument                | ~fix-word-upcase~                                 +upcase-word+ | ~sp-backward-up-sexp~            +backward-up-list+ |
| v       | scroll-up-command                 | scroll-down-command                                             | scroll-other-window                                 |
| w       | kill-region                       | kill-ring-save                                                  | ~sp-copy-sexp~                   +append-next-kill+ |
| x       | [C-x-]                            | ~counsel-M-x~                        +execute-extended-command+ | eval-defun                                          |
| y       | yank                              | yank-pop                                                        | ~browse-kill-ring~                                  |
| z       | suspend-frame                     | ~zzz-to-char~                                     +zap-to-char+ | eval-region                                         |

on text terminals, shift does not work with ctrl.

|   | M-                                |
|---+-----------------------------------|
| A | ~org-agenda~                      |
| B |                                   |
| C |                                   |
| D | ~global-hungry-delete-mode~       |
| E |                                   |
| F |                                   |
| G | ~magit-status~                    |
| H |                                   |
| I | ~global-aggressive-indent-mode~   |
| J |                                   |
| K |                                   |
| L | ~global-centered-cursor-mode~     |
| M | ~mc/mark-more-like-this-extended~ |
| N |                                   |
| O |                                   |
| P |                                   |
| Q |                                   |
| R | ~cljr~                            |
| S | ~cider-scratch~                   |
| T |                                   |
| U |                                   |
| V |                                   |
| W |                                   |
| X |                                   |
| Y |                                   |
| Z |                                   |

others. incomplete.

| C-h i   | info                                                      |
| C-h r   | info-emacs-manual                                         |
| C-x C-t | ~sp-transpose-hybrid-sexp~              +transpose-lines+ |
| C-x f   | set-fill-column                                           |
| C-x o   | ~ace-window~                               +other-window+ |
| C-x u   | ~undo-tree-visualize~                                     |
| C-x z   | repeat                                                    |
| DEL     | ~sp-backward-delete-char~ +backward-delete-char-untabify+ |
| M-g g   | ~avy-goto-line~                               +goto-line+ |

* load
make =user-init-file= like this.
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'package)
  (package-initialize)
  (require 'org)
  (org-babel-load-file (expand-file-name "setup.org" user-emacs-directory))
#+END_SRC
or this for tangled setup.
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'package)
  (package-initialize)
  (load-file (expand-file-name "setup.el" user-emacs-directory))
#+END_SRC
external libraries.
#+BEGIN_SRC emacs-lisp
  (push '("melpa" . "http://melpa.org/packages/") package-archives)
  (customize-set-variable
   'package-selected-packages
   '(dash dash-functional benchmark-init delight bind-key exec-path-from-shell
          zenburn-theme powerline rainbow-delimiters
          magit projectile counsel flx smex which-key avy centered-cursor-mode ace-window
          browse-kill-ring undo-tree smartparens multiple-cursors visual-regexp expand-region region-bindings-mode drag-stuff aggressive-indent hungry-delete fix-word zzz-to-char whitespace-cleanup-mode
          company company-quickhelp yasnippet flycheck flycheck-pos-tip
          clojure-mode cider clj-refactor kibit-helper geiser ediprolog haskell-mode idris-mode
          ess elpy js2-mode rainbow-mode csv-mode markdown-mode
          rust-mode cargo flycheck-rust racer
          latex-preview-pane cdlatex company-auctex))
#+END_SRC
or choose the stable versions.
#+BEGIN_SRC emacs-lisp :tangle no
  (push '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/") package-archives)
#+END_SRC
to install the packages above, change =:tangle no= to =:tangle yes= below, or manually execute the commands.
#+BEGIN_SRC emacs-lisp :tangle no
  (package-refresh-contents)
  (package-install-selected-packages)
#+END_SRC
bench when necessary.
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'benchmark-init)
  (benchmark-init/activate)
#+END_SRC
some helper functions.
#+BEGIN_SRC emacs-lisp
  (require 'dash)
  (require 'dash-functional)
  (dash-enable-font-lock)

  (defun cset (&rest sym-vals)
    (-each (-partition-all 2 sym-vals)
      (-applify #'customize-set-variable)))

  (defun autoload-all (file &rest syms)
    (-each syms (-rpartial #'autoload file)))

  (defun hook-all (f &rest hs)
    (-each hs (-rpartial #'add-hook f)))

  (defun add-hooks (h &rest fs)
    (-each fs (-partial #'add-hook h)))

  (require 'delight)
  (require 'bind-key)
#+END_SRC
prevent custom from editing my files.
#+BEGIN_SRC emacs-lisp
  (cset 'custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC
backup.
#+BEGIN_SRC emacs-lisp
  (cset 'create-lockfiles nil
        'auto-save-default nil
        'version-control t
        'delete-old-versions t
        'backup-directory-alist `(("." . ,temporary-file-directory)))
#+END_SRC
on mac.
#+BEGIN_SRC emacs-lisp
  (when (equal 'ns window-system)
    (toggle-frame-fullscreen)
    (bind-keys ("<C-s-f>" . toggle-frame-fullscreen) ("<C-s-268632070>" . toggle-frame-fullscreen))
    (cset 'insert-directory-program "gls")
    (require 'exec-path-from-shell)
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-envs '("PATH" "LANG" "LC_ALL" "EMAIL")))
#+END_SRC
enable some disabled commands.
#+BEGIN_SRC emacs-lisp
  (-each '(upcase-region
           downcase-region
           narrow-to-region
           dired-find-alternate-file)
    (-cut put <> 'disabled nil))
#+END_SRC
* theme
simpler style.
#+BEGIN_SRC emacs-lisp
  (cset 'uniquify-buffer-name-style 'forward
        'inhibit-startup-screen t
        'initial-scratch-message nil
        'tool-bar-mode nil
        'scroll-bar-mode nil
        'column-number-mode t
        'ring-bell-function 'ignore)
#+END_SRC
save me some typing.
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
fancier face on graphic devices.
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (custom-set-faces
     '(region ((t (:background "#242424"))))
     '(cursor ((t (:background "#DAA520"))))
     '(mc/cursor-bar-face ((t (:background "#DAA520" :foreground "#242424")))))
    (require 'zenburn-theme)
    (load-theme 'zenburn t)
    (require 'hl-line)
    (global-hl-line-mode 1)
    (require 'powerline)
    (powerline-center-theme)
    (require 'rainbow-delimiters)
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode-enable))
#+END_SRC
cursor.
#+BEGIN_SRC emacs-lisp
  (cset 'blink-cursor-mode nil
        'cursor-type '(bar . 3)
        'cursor-in-non-selected-windows 'hollow)
#+END_SRC
never wrap lines.
#+BEGIN_SRC emacs-lisp
  (cset 'truncate-lines t)
  (bind-keys ("C-M-_" . toggle-truncate-lines)
             ("C-M--" . toggle-truncate-lines)
             ("M-#" . linum-mode))
#+END_SRC
* navigation
manage projects.
#+BEGIN_SRC emacs-lisp
  (autoload 'magit-status "magit")
  (bind-key "M-G" 'magit-status)

  (require 'projectile)
  (delight 'projectile-mode '(:eval (format " [%s]" (projectile-project-name))) 'projectile)
  (cset 'projectile-switch-project-action 'projectile-dired
        'projectile-completion-system 'ivy)
  (projectile-mode 1)

  (cset 'same-window-buffer-names '("*Buffer List*"))
#+END_SRC
interaction.
#+BEGIN_SRC emacs-lisp
  (require 'counsel)
  (require 'flx)
  (require 'smex)
  (cset 'ivy-re-builders-alist
        '((read-file-name-internal . ivy--regex-ignore-order)
          (swiper . ivy--regex-plus)
          (t . ivy--regex-fuzzy))
        'ivy-height 13)
  (delight 'ivy-mode nil 'ivy)
  (ivy-mode 1)
  (bind-keys ("M-s" . swiper) ("M-x" . counsel-M-x))

  (require 'which-key)
  (delight 'which-key-mode nil 'which-key)
  (which-key-mode 1)
#+END_SRC
to jump around.
#+BEGIN_SRC emacs-lisp
  (autoload-all "avy" 'avy-goto-char-2 'avy-pop-mark 'avy-goto-line)
  (bind-keys ("M-'" . avy-goto-char-2)
             ("M-\"" . avy-pop-mark)
             ("M-g g" . avy-goto-line)
             ("M-g M-g" . avy-goto-line))

  (autoload 'ace-window "ace-window")
  (bind-key "C-x o" 'ace-window)
#+END_SRC
for scrolling.
#+BEGIN_SRC emacs-lisp
  (autoload 'centered-cursor-mode "centered-cursor-mode")
  (bind-key "M-L" 'global-centered-cursor-mode)
#+END_SRC
* edit
clipboard
#+BEGIN_SRC emacs-lisp
  (cset 'select-enable-clipboard t
        'save-interprogram-paste-before-kill t)

  (autoload 'browse-kill-ring "'browse-kill-ring")
  (bind-key "C-M-y" 'browse-kill-ring)
#+END_SRC
undo & redo.
#+BEGIN_SRC emacs-lisp
  (require 'undo-tree)
  (delight 'undo-tree-mode nil 'undo-tree)
  (bind-key "C--" 'undo-tree-undo)
  (global-undo-tree-mode 1)
#+END_SRC
structured editing.
#+BEGIN_SRC emacs-lisp
  (require 'smartparens)
  (require 'smartparens-config)
  (delight 'smartparens-mode nil 'smartparens)
  (set-face-attribute 'sp-show-pair-match-face    nil :background "#181818" :foreground "#A41210" :weight 'bold)
  (set-face-attribute 'sp-show-pair-mismatch-face nil :background "#161616" :foreground "#003B6F" :weight 'black)
  (bind-keys :map smartparens-mode-map
             ;; nav
             ("M-n" . sp-next-sexp)
             ("M-p" . sp-previous-sexp)
             ("C-M-f" . sp-forward-sexp)
             ("C-M-b" . sp-backward-sexp)
             ("C-M-a" . sp-beginning-of-sexp)
             ("C-M-e" . sp-end-of-sexp)
             ("C-M-n" . sp-select-next-thing)
             ("C-M-p" . sp-select-previous-thing-exchange)
             ("C-M-d" . sp-down-sexp)
             ("C-M-u" . sp-backward-up-sexp)
             ;; edit
             ("C-M-o" . sp-splice-sexp)
             ("C-M-j" . sp-split-sexp)
             ("C-M-h" . sp-join-sexp)
             ("C-M-q" . sp-rewrap-sexp)
             ("C-M-w" . sp-copy-sexp)
             ("C-M-k" . sp-kill-sexp)
             ;; transform
             ("M-[" . sp-absorb-sexp)
             ("M-]" . sp-forward-slurp-sexp)
             ("M-{" . sp-extract-before-sexp)
             ("M-}" . sp-forward-barf-sexp)
             ("M-(" . sp-splice-sexp-killing-backward)
             ("M-)" . sp-splice-sexp-killing-forward)
             ("M-*" . sp-raise-sexp)
             ("M-+" . sp-convolute-sexp)
             ("C-M-t"   . sp-transpose-sexp)
             ("C-x C-t" . sp-transpose-hybrid-sexp)
             ;; strict
             ("C-d"   . sp-delete-char)
             ("DEL"   . sp-backward-delete-char)
             ("M-d"   . sp-kill-word)
             ("M-DEL" . sp-backward-kill-word)
             ("C-k"   . sp-kill-hybrid-sexp))
  (smartparens-global-mode 1)
  (show-smartparens-global-mode 1)
#+END_SRC
batched editing.
#+BEGIN_SRC emacs-lisp
  (autoload-all "mc-mark-more" 'mc/mark-more-like-this-extended 'mc/mark-all-in-region 'mc/mark-lines)
  (bind-key "M-M" 'mc/mark-more-like-this-extended)

  (autoload-all "visual-regexp" 'vr/query-replace 'vr/replace 'vr/mc-mark)
  (bind-key "C-M-%" 'vr/query-replace)
#+END_SRC
region.
#+BEGIN_SRC emacs-lisp
  (require 'region-bindings-mode)
  (bind-keys :map region-bindings-mode-map
             ("b" . comment-box)
             ("d" . delete-region)
             ("g" . keyboard-quit)
             ("i" . indent-region)
             ("k" . kill-region)
             ("l" . downcase-region)
             ("m" . mc/mark-all-in-region)
             ("M" . vr/mc-mark)
             ("n" . mc/edit-lines)
             ("r" . replace-string)
             ("R" . vr/replace)
             ("u" . upcase-region)
             ("w" . kill-ring-save)
             (";" . comment-or-uncomment-region)
             ("$" . flyspell-region))
  (region-bindings-mode-enable)

  (autoload 'er/expand-region "expand-region")
  (bind-key "M-h" 'er/expand-region)
#+END_SRC
drag.
#+BEGIN_SRC emacs-lisp
  (autoload-all "drag-stuff" 'drag-stuff-left 'drag-stuff-right 'drag-stuff-down 'drag-stuff-up)
  (bind-keys ("<M-left>" . drag-stuff-left)
             ("<M-right>" . drag-stuff-right)
             ("<M-down>" . drag-stuff-down)
             ("<M-up>" . drag-stuff-up))
#+END_SRC
enhanced behavior.
#+BEGIN_SRC emacs-lisp
  (cset 'fill-column 81
        'indent-tabs-mode nil)

  (autoload-all "fix-word" 'fix-word-upcase 'fix-word-downcase 'fix-word-capitalize)
  (bind-keys ("M-u" . fix-word-upcase)
             ("M-l" . fix-word-downcase)
             ("M-c" . fix-word-capitalize))

  (autoload 'zzz-to-char "zzz-to-char")
  (bind-key "M-z" 'zzz-to-char)
#+END_SRC
being lazy.
#+BEGIN_SRC emacs-lisp
  (require 'aggressive-indent)
  (delight 'aggressive-indent-mode " i" 'aggressive-indent)
  (bind-key "M-I" 'global-aggressive-indent-mode)
  (global-aggressive-indent-mode 1)

  (require 'hungry-delete)
  (delight 'hungry-delete-mode " d" 'hungry-delete)
  (bind-key "M-D" 'global-hungry-delete-mode)
  (global-hungry-delete-mode 1)

  (require 'whitespace-cleanup-mode)
  (delight 'whitespace-cleanup-mode nil 'whitespace-cleanup-mode)
  (global-whitespace-cleanup-mode 1)
#+END_SRC
hippie.
#+BEGIN_SRC emacs-lisp
  (autoload 'hippie-expand "hippie-exp")
  (bind-key "M-/" 'hippie-expand)
  (with-eval-after-load 'hippie-exp
    (cset 'hippie-expand-try-functions-list
          '(try-complete-file-name-partially
            try-complete-file-name
            try-expand-all-abbrevs
            try-expand-dabbrev
            try-expand-dabbrev-visible
            try-expand-dabbrev-all-buffers
            try-expand-dabbrev-from-kill
            try-expand-whole-kill
            try-complete-lisp-symbol-partially
            try-complete-lisp-symbol)))
#+END_SRC
* lang
auto-completion.
#+BEGIN_SRC emacs-lisp
  (require 'company)
  (require 'company-quickhelp)
  (delight 'company-mode nil 'company)
  (bind-keys ("C-M-i" . company-complete)
             :map company-active-map
             ("M-h" . company-quickhelp-manual-begin))
  (unbind-key "<tab>" company-active-map)
  (unbind-key "TAB" company-active-map)
  (cset 'company-idle-delay 0.2
        'company-minimum-prefix-length 2
        'company-tooltip-align-annotations t
        'company-selection-wrap-around t
        'company-quickhelp-delay nil)
  (global-company-mode 1)
  (company-quickhelp-mode 1)
#+END_SRC
snippets.
#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (delight 'yas-minor-mode nil 'yasnippet)
  (yas-global-mode 1)

  (hook-all #'flyspell-mode
            'org-mode-hook
            'LaTeX-mode-hook
            'markdown-mode-hook)
  (with-eval-after-load 'flyspell
    (delight 'flyspell-mode " $" 'flyspell)
    (bind-key "C-;" 'flyspell-correct-word-before-point flyspell-mode-map))
#+END_SRC
error check.
#+BEGIN_SRC emacs-lisp
  (hook-all #'flycheck-mode
            'emacs-lisp-mode-hook
            'geiser-mode-hook
            'shell-mode-hook
            'rust-mode-hook
            'LaTeX-mode-hook
            'markdown-mode-hook
            'css-mode-hook
            'html-mode-hook
            'js2-mode-hook)
  (with-eval-after-load 'flycheck
    (flycheck-pos-tip-mode))
#+END_SRC
eldoc.
#+BEGIN_SRC emacs-lisp
  (require 'eldoc)
  (delight 'eldoc-mode nil 'eldoc)
  (bind-keys ("C-j" . newline-and-indent)
             :map lisp-mode-shared-map
             ("M-RET" . eval-last-sexp)
             ("C-M-x" . eval-defun)
             ("C-M-z" . eval-region))
  (hook-all #'eldoc-mode
            'emacs-lisp-mode-hook
            'lisp-interaction-mode-hook
            'ielm-mode-hook
            'clojure-mode-hook
            'cider-repl-mode-hook
            'idris-mode-hook
            'rust-mode-hook)
#+END_SRC
clojure.
#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook #'clj-refactor-mode)
  (autoload 'cider-scratch "cider-scratch")
  (bind-key "M-S" 'cider-scratch)
  (with-eval-after-load 'clojure-mode
    (require 'cider)
    (require 'clj-refactor)
    (require 'kibit-helper)
    (bind-keys :map cider-mode-map
               ("M-RET" . cider-eval-last-sexp)
               ("C-M-x" . cider-eval-defun-at-point)
               ("C-M-z" . cider-eval-region))
    (cljr-add-keybindings-with-prefix "M-R")
    (cset 'cljr-suppress-middleware-warnings t
          'nrepl-hide-special-buffers t
          'cider-font-lock-dynamically t
          'cider-prefer-local-resources t
          'cider-allow-jack-in-without-project t
          'cider-doc-xref-regexp "\\[\\[\\(.*?\\)\\]\\]"
          'cider-repl-history-file "~/.emacs.d/cider-history"))
#+END_SRC
scheme.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'geiser
    (bind-keys :map scheme-mode-map
               ("M-RET" . geiser-eval-last-sexp)
               ("C-M-x" . geiser-eval-definition)
               ("C-M-z" . geiser-eval-region))
    (cset 'geiser-active-implementations '(chez)))
#+END_SRC
prolog.
#+BEGIN_SRC emacs-lisp
  (autoload 'prolog-mode "prolog")
  (push '("\\.pl$" . prolog-mode) auto-mode-alist)
  (with-eval-after-load 'prolog
    (bind-key "M-RET" 'ediprolog-dwim prolog-mode-map))
#+END_SRC
idris.
#+BEGIN_SRC emacs-lisp
  (add-hook 'idris-mode-hook (lambda () (aggressive-indent-mode -1)))
  (with-eval-after-load 'idris-mode
    (bind-keys :map idris-mode-map
               ("M-RET" . idris-case-dwim)
               ("C-M-x" . idris-add-clause)
               ("C-M-z" . idris-proof-search)
               ("C-c C-q" . idris-quit)))
#+END_SRC
r.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'ess
    (bind-keys :map ess-mode-map
               ("M-RET" . ess-eval-line)
               ("C-M-x" . ess-eval-function-or-paragraph)
               ("C-M-z" . ess-eval-region)))
#+END_SRC
python.
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
            (lambda ()
              (elpy-mode 1)
              (highlight-indentation-mode -1)
              (aggressive-indent-mode -1)))
  (with-eval-after-load 'python-mode
    (bind-keys :map python-mode-map
               ("C-M-x" . python-shell-send-defun)
               ("C-M-z" . python-shell-send-region))
    (require 'elpy)
    (elpy-enable))
#+END_SRC
rust.
#+BEGIN_SRC emacs-lisp
  (add-hooks 'rust-mode-hook
             #'cargo-minor-mode
             #'flycheck-rust-setup
             #'racer-mode)
  (with-eval-after-load 'rust-mode
    (require 'cargo)
    (require 'flycheck-rust)
    (require 'racer)
    (cset 'racer-rust-src-path
          (funcall (if (equal 'ns window-system)
                       #'exec-path-from-shell-getenv
                     #'getenv)
                   "RUST_SRC_PATH")))
#+END_SRC
web.
#+BEGIN_SRC emacs-lisp
  (autoload 'js2-mode "js2-mode")
  (push '("\\.js\\'" . js2-mode) auto-mode-alist)

  (autoload 'rainbow-mode "rainbow-mode")
#+END_SRC
markdown.
#+BEGIN_SRC emacs-lisp
  (autoload 'gfm-mode "markdown-mode")
  (autoload 'markdown-mode "markdown-mode")
  (push '("README\\.md\\'" . gfm-mode) auto-mode-alist)
  (push '("\\.[Rr]md\\'" . markdown-mode) auto-mode-alist)
  (with-eval-after-load 'markdown-mode
    (cset 'markdown-enable-math t))
#+END_SRC
tex.
#+BEGIN_SRC emacs-lisp
  (add-hooks 'LaTeX-mode-hook
             #'LaTeX-math-mode
             #'latex-preview-pane-enable
             #'turn-on-cdlatex
             #'turn-on-reftex)
  ;; (add-hook 'TeX-mode-hook (lambda () (setq TeX-command-default "xelatexmk")))
  (cset 'TeX-command-default "xelatexmk")
  (with-eval-after-load 'tex
    (cset 'TeX-engine 'xetex)
    (cset 'TeX-auto-save t
          'TeX-parse-self t)
    (require 'reftex)
    (cset 'reftex-plug-into-AUCTeX t)
    (require 'latex-preview-pane)
    (require 'cdlatex)
    (unbind-key "(" cdlatex-mode-map)
    (unbind-key "<" cdlatex-mode-map)
    (unbind-key "[" cdlatex-mode-map)
    (unbind-key "{" cdlatex-mode-map)
    (require 'company-auctex)
    (with-eval-after-load 'company
      (company-auctex-init))
    (push '("xelatexmk"
            "latexmk -pdf -pdflatex=\"xelatex -interaction=nonstopmode -shell-escape -synctex=1\" %s"
            TeX-run-TeX nil t :help "run xelatexmk on file")
          TeX-command-list)
    ;; Skim -> Preferences -> Sync; CMD + shift + click in the pdf file for jumping to source
    (push '("skim" "/Applications/Skim.app/Contents/SharedSupport/displayline -b %n %o %b")
          TeX-view-program-list)
    (push '(output-pdf "skim") TeX-view-program-selection)
    (server-start))
#+END_SRC
org.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'turn-on-org-cdlatex)
  (autoload 'org-agenda "org-agenda")
  (bind-key "M-A" 'org-agenda)
  (with-eval-after-load 'org
    (unbind-key "C-'" org-mode-map)
    (unbind-key "M-h" org-mode-map)
    (cset 'org-directory "~/sotha_sil/emacs/org"
          'org-agenda-files "~/sotha_sil/emacs/org/agenda-files"
          'org-archive-location "~/sotha_sil/emacs/org/archive.org::"
          'org-log-done 'time
          'org-latex-create-formula-image-program 'imagemagick
          'org-latex-listings 'minted
          'org-src-fontify-natively t
          'org-latex-default-packages-alist
          '(("" "fontspec" t)
            ("" "graphicx" t)
            ("" "longtable" nil)
            ("" "float" nil)
            ("" "wrapfig" nil)
            ("" "rotating" nil)
            ("normalem" "ulem" t)
            ("" "amsmath" t)
            ("" "hyperref" nil))))
#+END_SRC
