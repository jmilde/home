#+TITLE: emacs setup
#+AUTHOR: ysmiraak
* init
[[https://www.gnu.org/software/emacs/][emacs 25]] is required.
make this the =user-init-file= to tangle and load this setup.
#+BEGIN_SRC emacs-lisp :tangle no
  (package-initialize)
  (org-babel-load-file (expand-file-name "setup.org" user-emacs-directory))
#+END_SRC
the [[https://melpa.org/#/][melpa repo]] hosts the most update-to-date packages.
#+BEGIN_SRC emacs-lisp
  (push '("melpa" . "http://melpa.org/packages/") package-archives)
#+END_SRC
occasionally, some update is buggy. just revert to the [[https://stable.melpa.org/#/][stable version]].
#+BEGIN_SRC emacs-lisp :tangle no
  (push '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/") package-archives)
#+END_SRC
i use these packages.
#+BEGIN_SRC emacs-lisp
  (customize-set-variable
   'package-selected-packages
   '(s f dash dash-functional bind-key delight suggest
       benchmark-init exec-path-from-shell exwm
       zenburn-theme powerline rainbow-delimiters
       counsel flx smex which-key magit projectile avy ace-window centered-cursor-mode
       undo-tree browse-kill-ring zzz-to-char fix-word vimish-fold drag-stuff aggressive-indent hungry-delete
       smartparens multiple-cursors visual-regexp expand-region region-bindings-mode
       company company-quickhelp yasnippet flycheck flycheck-pos-tip
       clojure-mode cider clj-refactor kibit-helper geiser ediprolog pasp-mode haskell-mode idris-mode
       rust-mode cargo flycheck-rust racer elpy js2-mode rainbow-mode
       ess csv-mode markdown-mode latex-preview-pane cdlatex company-auctex))
#+END_SRC
to install these packages, change =:tangle no= to =:tangle yes= for this code block, or manually execute the commands.
#+BEGIN_SRC emacs-lisp :tangle no
  (package-refresh-contents)
  (package-install-selected-packages)
#+END_SRC
some packages are autoloaded, namely only loaded when used.
others, since they are always used, are loaded during initialization.
if emacs takes too long to initialize, [[https://github.com/dholm/benchmark-init-el][benchmark-init]] helps to tell why.
#+BEGIN_SRC emacs-lisp :tangle no
  (benchmark-init/activate)
#+END_SRC
in this setup, each package is configured in this order.
- autoload
- bind global
- mode & hook
- activation & delight
- config
- bind local
- related
* plus
my modifications and extensions for emacs.
** elisp
modern [[https://github.com/magnars/s.el][string]], [[https://github.com/rejeep/f.el][file]], and [[https://github.com/magnars/dash.el#installation][list]] libraries to make elisp usable for me.
[[https://github.com/jwiegley/use-package/blob/master/bind-key.el][bind-key]] simplifies mode-map management with =bind-keys=, =unbind-key=, and =describe-personal-keybindings=.
[[https://www.emacswiki.org/emacs/DelightedModes][delight]] keeps the mode-line clean.
[[https://www.emacswiki.org/emacs/ElDoc][suggest]] for learning.
#+BEGIN_SRC emacs-lisp
  (mapc #'require '(s f dash dash-functional bind-key delight))
  (dash-enable-font-lock)
  (bind-keys ("M-Q" . suggest))
#+END_SRC
[[https://github.com/Wilfred/suggest.el][eldoc]]
#+BEGIN_SRC emacs-lisp
  (--each '(emacs-lisp-mode-hook lisp-interaction-mode-hook ielm-mode-hook)
    (add-hook it #'eldoc-mode))
  (delight 'eldoc-mode nil 'eldoc)
#+END_SRC
to evaluate code interactively, i bind =M-RET= for region or sexp or line and =C-M-x= for defun or block.
this applies to all language-specific modes which offers the options.
#+BEGIN_SRC emacs-lisp
  (defmacro def-eval-dwim (name eval-region eval-last)
    "define NAME to interactively call either the EVAL-REGION
  function or the EVAL-LAST function, depending on `use-region-p'.
  both functions must be given as unquoted symbols."
    `(defun ,name ()
       ,(format "`%s' or `%s'" eval-region eval-last)
       (interactive)
       (call-interactively
        (if (use-region-p)
            (function ,eval-region)
          (function ,eval-last)))))
  (def-eval-dwim eval-dwim eval-region eval-last-sexp)
  (bind-keys :map lisp-mode-shared-map
             ("M-RET" . eval-dwim)
             ("C-M-x" . eval-defun))
#+END_SRC
disable =completion-at-point= locally to favor =company-complete= globally.
#+BEGIN_SRC emacs-lisp
  (--each `(,emacs-lisp-mode-map ,lisp-interaction-mode-map)
    (unbind-key "C-M-i" it))
#+END_SRC
some helpers.
#+BEGIN_SRC emacs-lisp
  (defun unbind-keys (m &rest ks)
    "unbind all keys in KS from mode M."
    (--each ks (unbind-key it m)))
  (defun add-hooks (h &rest fs)
    "add all functions in FS to hook H in reverse."
    (--each (nreverse fs) (add-hook h it)))
  (defun cset (&rest sym-vals)
    "customize each symbol to value in SYM-VALS."
    (-each (-partition-all 2 sym-vals)
      (-applify #'customize-set-variable)))
#+END_SRC
** system
to prevent custom from editing my =user-init-file=.
#+BEGIN_SRC emacs-lisp
  (cset 'custom-file (f-expand "custom.el" user-emacs-directory))
#+END_SRC
no lock.  no auto-save.  no backup.  cuz [[https://git-scm.com/][git]].
#+BEGIN_SRC emacs-lisp
  (cset 'create-lockfiles           nil
        'auto-save-default          nil
        'auto-save-list-file-prefix nil
        'make-backup-files          nil)
#+END_SRC
for [[https://www.emacswiki.org/emacs/EmacsClient][emacsclient]].
#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p) (server-start))
#+END_SRC
for getting [[https://github.com/purcell/exec-path-from-shell][env]], dired (see =dired-use-ls-dired=), and fullscreen to work on [[https://www.emacswiki.org/emacs/MacOSTweaks][mac]].
#+BEGIN_SRC emacs-lisp
  (when (equal 'ns window-system)
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-envs '("PATH" "LANG" "LC_ALL" "EMAIL"))
    (cset 'insert-directory-program (executable-find "gls"))
    (bind-keys ("<C-s-f>" . toggle-frame-fullscreen) ("<C-s-268632070>" . toggle-frame-fullscreen))
    (toggle-frame-fullscreen))
#+END_SRC
[[https://github.com/ch11ng/exwm][emacs x window manager]] for my arch linux.
#+BEGIN_SRC emacs-lisp
  (when (equal "yksarch" (system-name))
    (cset 'menu-bar-mode                     nil
          'display-time-mode                 t
          'display-time-format               "%H:%M %a %y-%m-%d"
          'display-time-default-load-average nil)
    (require 'exwm)
    (add-hooks 'exwm-floating-setup-hook #'exwm-layout-hide-mode-line)
    (add-hooks 'exwm-update-class-hook (lambda () (exwm-workspace-rename-buffer exwm-class-name)))
    (defun exwm-shell-command (command)
      "interactive wrapper for `start-process-shell-command'"
      (interactive (list (read-shell-command "$ ")))
      (start-process-shell-command command nil command))
    (--map (exwm-input-set-key (kbd (car it)) (cdr it))
           `(("s-&" . exwm-shell-command)
             ("s-0" . ,(lambda () (interactive) (exwm-shell-command "slock")))
             ("s-1" . ,(lambda () (interactive) (exwm-shell-command "firefox")))
             ("s-2" . ,(lambda () (interactive) (exwm-shell-command "vlc")))
             ("s-t" . ,(lambda () (interactive) (ansi-term "htop" "htop")))
             ("s-h" . ,(lambda () (interactive) (enlarge-window-horizontally 28)))
             ("s-a" . windmove-left)
             ("s-s" . windmove-down)
             ("s-w" . windmove-up)
             ("s-d" . windmove-right)
             ("s-m" . exwm-input-toggle-keyboard)
             ("s-r" . exwm-reset)))
    (defalias 'suspend-frame #'eshell)
    (exwm-enable))
#+END_SRC
removes some safety measures.
they encourage recklessness.
#+BEGIN_SRC emacs-lisp
  (cset 'disabled-command-function nil)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
=C-z= often interferes with =C-c C-z=.  stick to =C-x C-z= instead.
#+BEGIN_SRC emacs-lisp
  (unbind-key "C-z")
#+END_SRC
** theme
simpler style.
#+BEGIN_SRC emacs-lisp
  (cset 'uniquify-buffer-name-style 'forward
        'inhibit-startup-screen     t
        'initial-scratch-message    nil
        'tool-bar-mode              nil
        'scroll-bar-mode            nil
        'line-number-mode           t
        'column-number-mode         t
        'ring-bell-function         'ignore)
#+END_SRC
fancier face on graphic devices.
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (add-hooks 'prog-mode-hook #'rainbow-delimiters-mode-enable)
    (load-theme 'zenburn t)
    (powerline-center-theme)
    (set-face-attribute 'region nil :background "#242424")
    (set-face-attribute 'cursor nil :background "#DAA520")
    (global-hl-line-mode 1))
#+END_SRC
cursor style.
#+BEGIN_SRC emacs-lisp
  (cset 'blink-cursor-mode              nil
        'cursor-type                    '(bar . 3)
        'cursor-in-non-selected-windows 'hollow)
#+END_SRC
never wrap lines.
#+BEGIN_SRC emacs-lisp
  (bind-keys ("M-#"   . linum-mode)
             ("C-M-_" . toggle-truncate-lines)
             ("C-M--" . toggle-truncate-lines))
  (cset 'truncate-lines t)
#+END_SRC
** navigation
within emacs.
#+BEGIN_SRC emacs-lisp
  (bind-keys ("C-M-z"   . swiper)
             ("M-x"     . counsel-M-x)
             ("C-x C-f" . counsel-find-file))
  (ivy-mode 1)
  (delight 'ivy-mode nil 'ivy)
  (cset 'ivy-initial-inputs-alist nil
        'ivy-re-builders-alist    '((swiper . ivy--regex-plus)
                                    (t      . ivy--regex-fuzzy))
        'ivy-height               13)
  (bind-keys :map ivy-minibuffer-map
             ("M-n" . ivy-next-line)      ("C-n"   . ivy-next-history-element)
             ("M-p" . ivy-previous-line)  ("C-p"   . ivy-previous-history-element)
             ("C-j" . ivy-immediate-done) ("C-M-j" . ivy-alt-done))
  (which-key-mode 1)
  (delight 'which-key-mode nil 'which-key)
#+END_SRC
among projects.
#+BEGIN_SRC emacs-lisp
  (projectile-mode 1)
  (delight 'projectile-mode '(:eval (format " [%s]" (projectile-project-name))) 'projectile)
  (cset 'projectile-switch-project-action 'projectile-dired
        'projectile-completion-system     'ivy)
  (bind-keys ("M-G" . magit-status))
#+END_SRC
to jump around.
#+BEGIN_SRC emacs-lisp
  (bind-keys ("M-'"     . avy-goto-char-timer)
             ("M-\""    . avy-pop-mark)
             ("M-g g"   . avy-goto-line)
             ("M-g M-g" . avy-goto-line)
             ("C-x o"   . ace-window))
  (cset 'avy-timeout-seconds 0.3)
#+END_SRC
for scrolling.
#+BEGIN_SRC emacs-lisp
  (autoload 'centered-cursor-mode "centered-cursor-mode")
  (bind-keys ("M-L" . centered-cursor-mode))
#+END_SRC
** editing
undo-tree.
#+BEGIN_SRC emacs-lisp
  (bind-keys  ("C--"   . undo-tree-undo))
  (global-undo-tree-mode 1)
  (delight 'undo-tree-mode nil 'undo-tree)
#+END_SRC
ibuffer.
#+BEGIN_SRC emacs-lisp
  (bind-keys ("C-x C-b" . ibuffer))
  (add-hooks 'ibuffer-mode-hook (-partial #'ibuffer-switch-to-saved-filter-groups "ysmiraak"))
  (cset 'ibuffer-saved-filter-groups
        '(("ysmiraak"
           ("emacs" (or (name . "^\\*scratch\\*$")
                        (name . "^\\*Messages\\*$")))
           ("exwm"      (mode . exwm-mode))
           ("cider" (or (name . "^\\*cider")
                        (name . "^\\*nrepl")))
           ("help"  (or (mode . help-mode)
                        (mode . apropos-mode)
                        (mode . Info-mode)
                        (name . "^\\*Backtrace\\*$")))
           ("dired"     (mode . dired-mode))
           ("magit"     (name . "^\\magit"))
           ("tmp"       (name . "^\\*.*\\*$"))
           (""          (name . ""))))
        'ibuffer-show-empty-filter-groups nil
        'ibuffer-expert t)
#+END_SRC
i do not use abbrev.
#+BEGIN_SRC emacs-lisp
  (cset 'save-abbrevs nil)
#+END_SRC
enhanced behavior.
#+BEGIN_SRC emacs-lisp
  (bind-keys ("C-M-y" . browse-kill-ring)
             ("M-z" . zzz-to-char)
             ("M-u" . fix-word-upcase)
             ("M-l" . fix-word-downcase)
             ("M-c" . fix-word-capitalize))
  (cset 'indent-tabs-mode nil)
#+END_SRC
extra convenience.
#+BEGIN_SRC emacs-lisp
  (bind-keys ("M-F" . vimish-fold-toggle)
             ("M-J" . vimish-fold-avy)
             ("M-K" . vimish-fold-delete)
             ("<M-left>"  . drag-stuff-left)
             ("<M-right>" . drag-stuff-right)
             ("<M-down>"  . drag-stuff-down)
             ("<M-up>"    . drag-stuff-up)
             ("M-D" . hungry-delete-mode)
             ("M-I" . aggressive-indent-mode)
             ("C-j" . newline-and-indent))
  (add-hooks 'before-save-hook #'whitespace-cleanup)
  (global-hungry-delete-mode 1)
  (delight 'hungry-delete-mode " d" 'hungry-delete)
  (global-aggressive-indent-mode 1)
  (delight 'aggressive-indent-mode " i" 'aggressive-indent)
  (--map (push it aggressive-indent-excluded-modes) '(idris-mode haskell-mode))
#+END_SRC
structured editing with symmetrical key chords.
|   | C        | M        | C-M      |
|---+----------+----------+----------|
| a | line min | buff min | sexp min |
| e | line max | buff max | sexp max |
| f | char inc | word inc | sexp inc |
| b | char dec | word dec | sexp dec |
| n | line inc | sent inc | para inc |
| p | line dec | sent dec | para dec |
#+BEGIN_SRC emacs-lisp
  (require 'smartparens-config)
  (smartparens-global-mode 1)
  (delight 'smartparens-mode nil 'smartparens)
  (bind-keys ("M-a"   . beginning-of-buffer)
             ("M-e"   . end-of-buffer)
             ("M-n"   . forward-sentence)
             ("M-p"   . backward-sentence)
             ("C-M-n" . forward-paragraph)
             ("C-M-p" . backward-paragraph)
             :map smartparens-mode-map
             ("C-M-a" . sp-beginning-of-sexp)
             ("C-M-e" . sp-end-of-sexp)
             ("C-M-f" . sp-forward-parallel-sexp)
             ("C-M-b" . sp-backward-parallel-sexp)
             ;; ] right [ left, M down C-M up
             ("C-M-]" . sp-up-sexp)
             ("C-M-[" . sp-backward-up-sexp)
             ("M-]"   . sp-backward-down-sexp)
             ("M-["   . sp-down-sexp)
             ;; restructuring bindings
             ("M-)"   . sp-forward-slurp-sexp)
             ("M-("   . sp-backward-slurp-sexp)
             ("M-}"   . sp-forward-barf-sexp)
             ("M-{"   . sp-backward-barf-sexp)
             ("M->"   . sp-splice-sexp-killing-forward)
             ("M-<"   . sp-splice-sexp-killing-backward)
             ("C-M-u" . sp-raise-sexp)
             ("C-M-d" . sp-splice-sexp)
             ("C-M-h" . sp-rewrap-sexp)
             ("C-M-j" . sp-split-sexp)
             ("M-+"   . sp-join-sexp)
             ("M-*"   . sp-convolute-sexp)
             ;; behavior enhancements
             ("M-DEL"   . sp-backward-kill-word)
             ("M-d"     . sp-kill-word)
             ("C-k"     . sp-kill-hybrid-sexp)
             ("C-M-k"   . sp-kill-sexp)
             ("C-M-t"   . sp-transpose-sexp)
             ("C-x C-t" . sp-transpose-hybrid-sexp)
             ("M-@"     . sp-select-next-thing)
             ("C-M-@"   . sp-select-previous-thing-exchange))
  (show-smartparens-global-mode 1)
  (set-face-attribute 'sp-show-pair-match-face    nil :background "#181818" :foreground "#A41210" :weight 'bold)
  (set-face-attribute 'sp-show-pair-mismatch-face nil :background "#161616" :foreground "#003B6F" :weight 'black)
#+END_SRC
batched editing.
#+BEGIN_SRC emacs-lisp
  (bind-keys ("M-M"   . mc/mark-more-like-this-extended))
  (when (display-graphic-p)
    (with-eval-after-load 'multiple-cursors
      (set-face-attribute 'mc/cursor-bar-face nil :background "#DAA520" :foreground "#242424")))
  (bind-keys ("C-M-%" . vr/query-replace))
#+END_SRC
region editing.
#+BEGIN_SRC emacs-lisp
  (bind-keys ("M-h" . er/expand-region))
  (require 'region-bindings-mode)
  (region-bindings-mode-enable)
  (bind-keys :map region-bindings-mode-map
             ("$" . flyspell-region)
             (";" . comment-or-uncomment-region)
             ("b" . comment-box)
             ("d" . delete-region)
             ("f" . vimish-fold)
             ("g" . keyboard-quit)
             ("i" . indent-region)
             ("k" . kill-region)
             ("l" . downcase-region)
             ("m" . mc/mark-all-in-region) ("M" . vr/mc-mark)
             ("n" . mc/edit-lines)
             ("r" . replace-string)        ("R" . vr/replace)
             ("u" . upcase-region)
             ("w" . kill-ring-save))
#+END_SRC
auto-completion.
#+BEGIN_SRC emacs-lisp
  (bind-keys ("M-/" . hippie-expand))
  (with-eval-after-load 'hippie-exp
    (cset 'hippie-expand-try-functions-list
          '(try-complete-file-name-partially
            try-complete-file-name
            try-expand-dabbrev
            try-expand-dabbrev-visible
            try-expand-dabbrev-all-buffers
            try-expand-dabbrev-from-kill
            try-expand-whole-kill
            try-complete-lisp-symbol-partially
            try-complete-lisp-symbol)))
  (bind-keys ("C-M-i" . company-complete))
  (global-company-mode 1)
  (company-quickhelp-mode 1)
  (delight 'company-mode nil 'company)
  (cset 'company-idle-delay                0.2
        'company-minimum-prefix-length     2
        'company-tooltip-align-annotations t
        'company-selection-wrap-around     t
        'company-quickhelp-delay           nil)
  (unbind-keys company-active-map "TAB" "<tab>")
  (bind-keys :map company-active-map ("M-h" . company-quickhelp-manual-begin))
#+END_SRC
snippet.
#+BEGIN_SRC emacs-lisp
  (yas-global-mode 1)
  (delight 'yas-minor-mode nil 'yasnippet)
#+END_SRC
spell check.
#+BEGIN_SRC emacs-lisp
  (bind-keys ("M-$" . flyspell-mode))
  (with-eval-after-load 'flyspell
    (delight 'flyspell-mode " $" 'flyspell)
    (unbind-keys flyspell-mode-map "C-M-i")
    (bind-keys :map flyspell-mode-map ("C-;" . flyspell-correct-word-before-point))
    (cset 'ispell-program-name "aspell"))
#+END_SRC
error check.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'flycheck
    (flycheck-pos-tip-mode))
#+END_SRC
* lang
#+BEGIN_SRC emacs-lisp
  (add-hooks 'eval-expression-minibuffer-setup-hook
             #'eldoc-mode
             #'smartparens-mode)
#+END_SRC
** clojure
#+BEGIN_SRC emacs-lisp
  (bind-keys ("M-S" . cider-scratch))
  (add-hooks 'clojure-mode-hook    #'eldoc-mode #'clj-refactor-mode)
  (add-hooks 'cider-repl-mode-hook #'eldoc-mode #'clj-refactor-mode)
  (with-eval-after-load 'cider
    (cset 'cider-font-lock-dynamically         t
          'cider-prefer-local-resources        t
          'cider-repl-use-pretty-printing      t
          'cider-doc-xref-regexp               "\\[\\[\\(.*?\\)\\]\\]"
          'cider-repl-history-file             (f-expand "cider-history" user-emacs-directory))
    (def-eval-dwim eval-dwim:clojure cider-eval-region cider-eval-last-sexp)
    (bind-keys :map cider-mode-map
               ("M-RET" . eval-dwim:clojure)
               ("C-M-x" . cider-eval-defun-at-point)))
  (with-eval-after-load 'clj-refactor
    (cljr-add-keybindings-with-prefix "M-R")
    (cset 'cljr-suppress-middleware-warnings t))
#+END_SRC
** scheme
#+BEGIN_SRC emacs-lisp
  (add-hooks 'geiser-mode-hook #'flycheck-mode)
  (with-eval-after-load 'geiser
    (cset 'geiser-active-implementations '(chez))
    (def-eval-dwim eval-dwim:scheme geiser-eval-region geiser-eval-last-sexp)
    (bind-keys :map scheme-mode-map
               ("M-RET" . eval-dwim:scheme)
               ("C-M-x" . geiser-eval-definition)))
#+END_SRC
** prolog
#+BEGIN_SRC emacs-lisp
  (push '("\\.pl$" . prolog-mode) auto-mode-alist)
  (with-eval-after-load 'prolog
    (bind-keys :map prolog-mode-map ("M-RET" . ediprolog-dwim)))
#+END_SRC
** haskell
#+BEGIN_SRC emacs-lisp
  (add-hooks 'haskell-mode-hook #'interactive-haskell-mode)
  (with-eval-after-load 'haskell-indentation
    (unbind-keys haskell-indentation-mode-map ";"))
#+END_SRC
** idris
#+BEGIN_SRC emacs-lisp
  (add-hooks 'idris-mode-hook #'eldoc-mode)
  (with-eval-after-load 'idris-mode
    (bind-keys :map idris-mode-map
               ("M-RET"   . idris-case-dwim)
               ("C-M-x"   . idris-add-clause)
               ("C-M-z"   . idris-proof-search)
               ("C-c C-q" . idris-quit)))
#+END_SRC
** rust
#+BEGIN_SRC emacs-lisp
  (add-hooks 'rust-mode-hook
             #'eldoc-mode
             #'flycheck-mode
             #'flycheck-rust-setup
             #'cargo-minor-mode
             #'racer-mode)
#+END_SRC
** shell
#+BEGIN_SRC emacs-lisp
  (cset 'eshell-preoutput-filter-functions '(ansi-color-apply))
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
  (add-hooks 'python-mode-hook #'elpy-mode (-partial #'highlight-indentation-mode -1))
  (with-eval-after-load 'python
    (cset 'python-shell-interpreter    "python3"
          'elpy-shell-use-project-root nil)
    (def-eval-dwim eval-dwim:python elpy-shell-send-region-or-buffer elpy-shell-send-statement)
    (bind-keys :map python-mode-map
               ("M-RET" . eval-dwim:python)
               ("C-M-x" . elpy-shell-send-group))
    (elpy-enable))
#+END_SRC
** javascript
#+BEGIN_SRC emacs-lisp
  (push '("\\.js\\'" . js2-mode) auto-mode-alist)
  (add-hooks 'js2-mode-hook  #'flycheck-mode)
  (add-hooks 'css-mode-hook  #'flycheck-mode)
  (add-hooks 'html-mode-hook #'flycheck-mode)
#+END_SRC
** r
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'ess
    (def-eval-dwim eval-dwim:ess ess-eval-region ess-eval-line)
    (bind-keys :map ess-mode-map
               ("M-RET" . eval-dwim:ess)
               ("C-M-x" . ess-eval-paragraph)))
#+END_SRC
** markdown
#+BEGIN_SRC emacs-lisp
  (push '("README\\.md\\'" . gfm-mode)      auto-mode-alist)
  (push '("\\.[Rr]md\\'"   . markdown-mode) auto-mode-alist)
  (add-hooks 'markdown-mode-hook #'flyspell-mode #'flycheck-mode)
  (with-eval-after-load 'markdown-mode
    (cset 'markdown-enable-math t))
#+END_SRC
** tex
#+BEGIN_SRC emacs-lisp
  (add-hooks 'LaTeX-mode-hook
             #'flyspell-mode
             #'flycheck-mode
             #'LaTeX-math-mode
             #'latex-preview-pane-enable
             #'turn-on-cdlatex
             #'turn-on-reftex
             (-partial #'set 'TeX-command-default "xelatexmk"))
  (with-eval-after-load 'tex
    (push '("xelatexmk"
            "latexmk -pdf -pdflatex=\"xelatex -interaction=nonstopmode -shell-escape -synctex=1\" %s"
            TeX-run-TeX nil t :help "run xelatexmk on file")
          TeX-command-list)
    ;; Skim -> Preferences -> Sync; CMD + shift + click in the pdf file for jumping to source
    (push '("skim" "/Applications/Skim.app/Contents/SharedSupport/displayline -b %n %o %b")
          TeX-view-program-list)
    (push '(output-pdf "skim") TeX-view-program-selection)
    (cset 'TeX-engine              'xetex
          'TeX-auto-save           t
          'TeX-parse-self          t
          'reftex-plug-into-AUCTeX t)
    (with-eval-after-load 'company
      (company-auctex-init)))
  (with-eval-after-load 'cdlatex
    (unbind-keys cdlatex-mode-map "<" "(" "[" "{"))
#+END_SRC
** org
#+BEGIN_SRC emacs-lisp
  (bind-keys ("M-A" . org-agenda))
  (add-hooks 'org-mode-hook #'turn-on-org-cdlatex)
  (with-eval-after-load 'org
    (cset 'org-directory (f-expand "org" user-emacs-directory))
    (cset 'org-agenda-files `(,(f-expand "agenda.org" org-directory))
          'org-adapt-indentation                  nil
          'org-log-done                           'time
          'org-latex-create-formula-image-program 'imagemagick
          'org-latex-listings                     'minted
          'org-src-fontify-natively               t
          'org-latex-with-hyperref                nil
          'org-latex-default-packages-alist
          '(("" "fontspec" t)
            ("" "graphicx" t)
            ("" "longtable" nil)
            ("" "float" nil)
            ("" "wrapfig" nil)
            ("" "rotating" nil)
            ("normalem" "ulem" t)
            ("" "amsmath" t)
            ("" "hyperref" nil)))
    (unbind-keys org-mode-map "C-M-i" "M-h" "M-a" "M-e" "M-{" "M-}")
    (bind-keys :map org-mode-map
               ("M-n"     . org-forward-sentence)
               ("M-p"     . org-backward-sentence)
               ("C-M-n"   . org-forward-element)
               ("C-M-p"   . org-backward-element)))
  (--map (push it safe-local-variable-values)
         '((org-beamer-outline-frame-title . "outline")
           (org-emphasis-alist             . nil)))
#+END_SRC
* summary
- dead on terminal: []
- forced translate: [target]
- override default: +old+ ~new~
|         | <36>                                 | <60>                                                         | <60>                                                         |
|         | C-                                   | M-                                                           | C-M-                                                         |
|---------+--------------------------------------+--------------------------------------------------------------+--------------------------------------------------------------|
| DEL     | [DEL]                                | ~sp-backward-kill-word~ +backward-kill-word+                 | [C-M-h]                                                      |
| TAB     | [TAB]                                | [C-M-i]                                                      | [C-M-i]                                                      |
| RET     | [RET]                                | ~eval-dwim~                                                  | [M-RET]                                                      |
| SPC     | [C-@]                                | just-one-space                                               | [M-SPC]                                                      |
| <up>    | <up>                                 | ~drag-stuff-up~                                              | [ESC <up>]                                                   |
| <left>  | ~[]~ +left-word+                     | ~drag-stuff-left~ +backward-word+                            | [ESC <left>]                                                 |
| <down>  | <down>                               | ~drag-stuff-down~                                            | [ESC <down>]                                                 |
| <right> | ~[]~ +right-word+                    | ~drag-stuff-right~ +forward-word+                            | [ESC <right>]                                                |
|---------+--------------------------------------+--------------------------------------------------------------+--------------------------------------------------------------|
| 1       | []                                   | digit-argument 1                                             | [M-1]                                                        |
| 2       | []                                   | digit-argument 2                                             | [M-2]                                                        |
| 3       | []                                   | digit-argument 3                                             | [M-3]                                                        |
| 4       | []                                   | digit-argument 4                                             | [M-4]                                                        |
| 5       | []                                   | digit-argument 5                                             | [M-5]                                                        |
| 6       | []                                   | digit-argument 6                                             | [M-6]                                                        |
| 7       | []                                   | digit-argument 7                                             | [M-7]                                                        |
| 8       | []                                   | digit-argument 8                                             | [M-8]                                                        |
| 9       | []                                   | digit-argument 9                                             | [M-9]                                                        |
| 0       | []                                   | digit-argument 0                                             | [M-0]                                                        |
|---------+--------------------------------------+--------------------------------------------------------------+--------------------------------------------------------------|
| !       | []                                   | shell-command                                                |                                                              |
| @       | set-mark-command                     | ~sp-select-next-thing~ +mark-word+                           | ~sp-select-previous-thing-exchange~  +mark-sexp+             |
| #       | []                                   | ~linum-mode~                                                 |                                                              |
| $       | []                                   | ~flyspell-mode~ +ispell-word+                                |                                                              |
| %       | []                                   | query-replace                                                | ~vr/query-replace~ +query-replace-regexp+                    |
| ^       |                                      | delete-indentation                                           |                                                              |
| &       | []                                   | async-shell-command                                          |                                                              |
| *       | []                                   | ~sp-convolute-sexp~                                          |                                                              |
| (       | []                                   | ~sp-backward-slurp-sexp~ +insert-parentheses+                |                                                              |
| )       | []                                   | ~sp-forward-slurp-sexp~ +move-past-close-and-reindent+       |                                                              |
|---------+--------------------------------------+--------------------------------------------------------------+--------------------------------------------------------------|
| -       | [C-_]                                | negative-argument                                            | [C-M-_]                                                      |
| =       | []                                   | count-words-region                                           | [M-=]                                                        |
| [       | [ESC-]                               | ~sp-down-sexp~                                               | ~sp-backward-up-sexp~                                        |
| ]       | abort-recursive-edit                 | ~sp-backward-down-sexp~                                      | ~sp-up-sexp~                                                 |
| ;       | []                                   | comment-dwim                                                 | [M-;]                                                        |
| '       | []                                   | ~avy-goto-char-2~ +abbrev-prefix-mark+                       | [M-']                                                        |
| \       | toggle-input-method                  | delete-horizontal-space                                      | indent-region                                                |
| `       | []                                   | tmm-menubar                                                  | [M-`]                                                        |
| ,       | []                                   | xref-pop-marker-stack                                        | [M-,]                                                        |
| .       | []                                   | xref-find-definitions                                        | [M-.]                                                        |
| /       | []                                   | ~hippie-expand~ +dabbrev-expand+                             | [M-/]                                                        |
|---------+--------------------------------------+--------------------------------------------------------------+--------------------------------------------------------------|
| _       | ~undo-tree-undo~ +undo+              | ~undo-tree-redo~                                             | ~toggle-truncate-lines~ +negative-argument+                  |
| +       | []                                   | ~sp-join-sexp~                                               |                                                              |
| {       | [C-[]                                | ~sp-backward-barf-sexp~ +backward-paragraph+                 |                                                              |
| }       | [C-]]                                | ~sp-forward-barf-sexp~ +forward-paragraph+                   |                                                              |
| :       | []                                   | eval-expression                                              |                                                              |
| "       | []                                   | ~avy-pop-mark~                                               |                                                              |
| \mid    | [C-\]                                | shell-command-on-region                                      |                                                              |
| ~       | []                                   | not-modified                                                 |                                                              |
| <       | []                                   | ~sp-splice-sexp-killing-backward~ +beginning-of-buffer+      |                                                              |
| >       | []                                   | ~sp-splice-sexp-killing-forward~ +end-of-buffer+             |                                                              |
| ?       | []                                   | xref-find-references                                         |                                                              |
|---------+--------------------------------------+--------------------------------------------------------------+--------------------------------------------------------------|
| a       | move-beginning-of-line               | ~beginning-of-buffer~ +backward-sentence+                    | ~sp-beginning-of-sexp~ +beginning-of-defun+                  |
| b       | backward-char                        | backward-word                                                | ~sp-backward-parallel-sexp~ +backward-sexp+                  |
| c       | [C-c-]                               | ~fix-word-capitalize~ +capitalize-word+                      | exit-recursive-edit                                          |
| d       | delete-char                          | ~sp-kill-word~ +kill-word+                                   | ~sp-splice-sexp~ +down-list+                                 |
| e       | move-end-of-line                     | ~end-of-buffer~ +forward-sentence+                           | ~sp-end-of-sexp~ +end-of-defun+                              |
| f       | forward-char                         | forward-word                                                 | ~sp-forward-parallel-sexp~ +forward-sexp+                    |
| g       | keyboard-quit                        | [M-g-]                                                       | []                                                           |
| h       | [C-h-]                               | ~er/expand-region~ +mark-paragraph+                          | ~sp-rewrap-sexp~ +mark-defun+                                |
| i       | [TAB]                                | tab-to-tab-stop                                              | ~company-complete~ +completion-at-point+                     |
| j       | newline-and-indent                   | indent-new-comment-line                                      | ~sp-split-sexp~ +indent-new-comment-line+                    |
| k       | ~sp-kill-hybrid-sexp~ +kill-line+    | kill-sentence                                                | ~sp-kill-sexp~ +kill-sexp+                                   |
| l       | recenter-top-bottom                  | ~fix-word-downcase~ +downcase-word+                          | reposition-window                                            |
| m       | [RET]                                | back-to-indentation                                          | [M-RET]                                                      |
| n       | next-line                            | ~forward-sentence~                                           | ~forward-paragraph~ +forward-list+                           |
| o       | open-line                            | [M-o-]                                                       | split-line                                                   |
| p       | previous-line                        | ~backward-sentence~                                          | ~backward-paragraph~ +backward-list+                         |
| q       | quoted-insert                        | fill-paragraph                                               | indent-pp-sexp                                               |
| r       | isearch-backward                     | move-to-window-line-top-bottom                               | isearch-backward-regexp                                      |
| s       | isearch-forward                      | [M-s-]                                                       | isearch-forward-regexp                                       |
| t       | transpose-chars                      | transpose-words                                              | ~sp-transpose-sexp~ +transpose-sexps+                        |
| u       | universal-argument                   | ~fix-word-upcase~ +upcase-word+                              | ~sp-raise-sexp~ +backward-up-list+                           |
| v       | scroll-up-command                    | scroll-down-command                                          | scroll-other-window                                          |
| w       | kill-region                          | kill-ring-save                                               | append-next-kill                                             |
| x       | [C-x-]                               | ~counsel-M-x~ +execute-extended-command+                     | eval-defun                                                   |
| y       | yank                                 | yank-pop                                                     | ~browse-kill-ring~                                           |
| z       | +suspend-frame+                      | ~zzz-to-char~ +zap-to-char+                                  | ~swiper~                                                     |
on text terminals, shift does not work with ctrl.
|   | <60>                                                         |
|   | M-                                                           |
|---+--------------------------------------------------------------|
| A | ~org-agenda~                                                 |
| B |                                                              |
| C |                                                              |
| D | ~hungry-delete-mode~                                         |
| E |                                                              |
| F | ~vimish-fold-toggle~                                         |
| G | ~magit-status~                                               |
| H |                                                              |
| I | ~aggressive-indent-mode~                                     |
| J | ~vimish-fold-avy~                                            |
| K | ~vimish-fold-delete~                                         |
| L | ~centered-cursor-mode~                                       |
| M | ~mc/mark-more-like-this-extended~                            |
| N |                                                              |
| O |                                                              |
| P |                                                              |
| Q | ~suggest~                                                    |
| R | ~cljr~                                                       |
| S | ~cider-scratch~                                              |
| T |                                                              |
| U |                                                              |
| V |                                                              |
| W |                                                              |
| X |                                                              |
| Y |                                                              |
| Z |                                                              |
others, incomplete.
| <12>         | <60>                                                         |
| C-h i        | info                                                         |
| C-h r        | info-emacs-manual                                            |
| C-x C-b      | ~ibuffer~ +list-buffers+                                     |
| C-x C-SPC    | pop-global-mark                                              |
| C-x C-t      | ~sp-transpose-hybrid-sexp~ +transpose-lines+                 |
| C-x f        | set-fill-column                                              |
| C-x o        | ~ace-window~ +other-window+                                  |
| C-x u        | ~undo-tree-visualize~                                        |
| C-x z        | repeat                                                       |
| M-g g        | ~avy-goto-line~ +goto-line+                                  |
